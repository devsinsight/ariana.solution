/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, NgZone } from '@angular/core';
import { HighlightJS } from './highlight.service';
var Highlight = /** @class */ (function () {
    function Highlight(_hljs, _zone) {
        this._hljs = _hljs;
        this._zone = _zone;
        /**
         * Stream that emits when code string is highlighted
         */
        this.highlighted = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    Highlight.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['code'] &&
            changes['code'].currentValue !== changes['code'].previousValue) {
            this.highlightElement(this.code, this.languages);
        }
    };
    /**
     * Highlighting with language detection and fix markup.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    /**
     * Highlighting with language detection and fix markup.
     * @param {?} code
     * @param {?=} languages
     * @return {?}
     */
    Highlight.prototype.highlightElement = /**
     * Highlighting with language detection and fix markup.
     * @param {?} code
     * @param {?=} languages
     * @return {?}
     */
    function (code, languages) {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            /** @type {?} */
            var res = _this._hljs.highlightAuto(code, languages);
            _this.highlightedCode = res.value;
            _this.highlighted.emit(res);
        });
    };
    Highlight.decorators = [
        { type: Directive, args: [{
                    host: {
                        '[class.hljs]': 'true',
                        '[innerHTML]': 'highlightedCode'
                    },
                    selector: '[highlight]'
                },] }
    ];
    /** @nocollapse */
    Highlight.ctorParameters = function () { return [
        { type: HighlightJS },
        { type: NgZone }
    ]; };
    Highlight.propDecorators = {
        languages: [{ type: Input }],
        code: [{ type: Input, args: ['highlight',] }],
        highlighted: [{ type: Output }]
    };
    return Highlight;
}());
export { Highlight };
if (false) {
    /**
     * Highlighted Code
     * @type {?}
     */
    Highlight.prototype.highlightedCode;
    /**
     * An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     * @type {?}
     */
    Highlight.prototype.languages;
    /**
     * Highlight code input
     * @type {?}
     */
    Highlight.prototype.code;
    /**
     * Stream that emits when code string is highlighted
     * @type {?}
     */
    Highlight.prototype.highlighted;
    /** @type {?} */
    Highlight.prototype._hljs;
    /** @type {?} */
    Highlight.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhpZ2hsaWdodGpzLyIsInNvdXJjZXMiOlsibGliL2hpZ2hsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUE0QixZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUdsRDtJQXVCRSxtQkFBb0IsS0FBa0IsRUFBVSxLQUFhO1FBQXpDLFVBQUssR0FBTCxLQUFLLENBQWE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFROzs7O1FBRm5ELGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQW1CLENBQUM7SUFHNUQsQ0FBQzs7Ozs7SUFFRCwrQkFBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFDRSxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ2YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUM5RDtZQUNBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILG9DQUFnQjs7Ozs7O0lBQWhCLFVBQWlCLElBQVksRUFBRSxTQUFvQjtRQUFuRCxpQkFNQztRQUxDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7O2dCQUNyQixHQUFHLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQztZQUNyRCxLQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDakMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkEvQ0YsU0FBUyxTQUFDO29CQUNULElBQUksRUFBRTt3QkFDSixjQUFjLEVBQUUsTUFBTTt3QkFDdEIsYUFBYSxFQUFFLGlCQUFpQjtxQkFDakM7b0JBQ0QsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCOzs7O2dCQVRRLFdBQVc7Z0JBRHVELE1BQU07Ozs0QkFtQjlFLEtBQUs7dUJBR0wsS0FBSyxTQUFDLFdBQVc7OEJBR2pCLE1BQU07O0lBMkJULGdCQUFDO0NBQUEsQUFoREQsSUFnREM7U0F6Q1ksU0FBUzs7Ozs7O0lBR3BCLG9DQUF3Qjs7Ozs7O0lBS3hCLDhCQUE2Qjs7Ozs7SUFHN0IseUJBQXlCOzs7OztJQUd6QixnQ0FBNEQ7O0lBRWhELDBCQUEwQjs7SUFBRSwwQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0SlMgfSBmcm9tICcuL2hpZ2hsaWdodC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0UmVzdWx0IH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgaG9zdDoge1xyXG4gICAgJ1tjbGFzcy5obGpzXSc6ICd0cnVlJyxcclxuICAgICdbaW5uZXJIVE1MXSc6ICdoaWdobGlnaHRlZENvZGUnXHJcbiAgfSxcclxuICBzZWxlY3RvcjogJ1toaWdobGlnaHRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgLyoqIEhpZ2hsaWdodGVkIENvZGUgKi9cclxuICBoaWdobGlnaHRlZENvZGU6IHN0cmluZztcclxuXHJcbiAgLyoqIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxhbmd1YWdlIG5hbWVzIGFuZCBhbGlhc2VzIHJlc3RyaWN0aW5nIGRldGVjdGlvbiB0byBvbmx5IHRob3NlIGxhbmd1YWdlcy5cclxuICAgKiBUaGUgc3Vic2V0IGNhbiBhbHNvIGJlIHNldCB3aXRoIGNvbmZpZ3VyZSwgYnV0IHRoZSBsb2NhbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIHRoZSBvcHRpb24gaWYgc2V0LlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGxhbmd1YWdlczogc3RyaW5nW107XHJcblxyXG4gIC8qKiBIaWdobGlnaHQgY29kZSBpbnB1dCAqL1xyXG4gIEBJbnB1dCgnaGlnaGxpZ2h0JykgY29kZTtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gY29kZSBzdHJpbmcgaXMgaGlnaGxpZ2h0ZWQgKi9cclxuICBAT3V0cHV0KCkgaGlnaGxpZ2h0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEhpZ2hsaWdodFJlc3VsdD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaGxqczogSGlnaGxpZ2h0SlMsIHByaXZhdGUgX3pvbmU6IE5nWm9uZSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKFxyXG4gICAgICBjaGFuZ2VzWydjb2RlJ10gJiZcclxuICAgICAgY2hhbmdlc1snY29kZSddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1snY29kZSddLnByZXZpb3VzVmFsdWVcclxuICAgICkge1xyXG4gICAgICB0aGlzLmhpZ2hsaWdodEVsZW1lbnQodGhpcy5jb2RlLCB0aGlzLmxhbmd1YWdlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24gYW5kIGZpeCBtYXJrdXAuXHJcbiAgICogQHBhcmFtIHZhbHVlIEFjY2VwdHMgYSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHRcclxuICAgKiBAcGFyYW0gbGFuZ3VhZ2VTdWJzZXQgQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgZGV0ZWN0aW9uIHRvIG9ubHkgdGhvc2UgbGFuZ3VhZ2VzLlxyXG4gICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXHJcbiAgICovXHJcbiAgaGlnaGxpZ2h0RWxlbWVudChjb2RlOiBzdHJpbmcsIGxhbmd1YWdlcz86IHN0cmluZ1tdKSB7XHJcbiAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgY29uc3QgcmVzID0gdGhpcy5faGxqcy5oaWdobGlnaHRBdXRvKGNvZGUsIGxhbmd1YWdlcyk7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRDb2RlID0gcmVzLnZhbHVlO1xyXG4gICAgICB0aGlzLmhpZ2hsaWdodGVkLmVtaXQocmVzKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=