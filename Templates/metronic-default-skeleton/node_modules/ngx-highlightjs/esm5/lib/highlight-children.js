/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef, NgZone } from '@angular/core';
import { HighlightJS } from './highlight.service';
var HighlightChildren = /** @class */ (function () {
    function HighlightChildren(_zone, _el, _hljs, _renderer) {
        this._zone = _zone;
        this._el = _el;
        this._hljs = _hljs;
        this._renderer = _renderer;
        this._observers = [];
    }
    /**
     * @return {?}
     */
    HighlightChildren.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.highlightChildren(this.selector);
    };
    /**
     * Highlight a code block
     * @param el Code block element
     */
    /**
     * Highlight a code block
     * @param {?} el Code block element
     * @return {?}
     */
    HighlightChildren.prototype.highlightElement = /**
     * Highlight a code block
     * @param {?} el Code block element
     * @return {?}
     */
    function (el) {
        // Remove element classes
        el.className = '';
        this._renderer.addClass(el, 'hljs');
        this._hljs.highlightBlock(el);
    };
    /**
     * Highlight multiple code blocks
     * @param selector elements selector
     */
    /**
     * Highlight multiple code blocks
     * @param {?} selector elements selector
     * @return {?}
     */
    HighlightChildren.prototype.highlightChildren = /**
     * Highlight multiple code blocks
     * @param {?} selector elements selector
     * @return {?}
     */
    function (selector) {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            /** @type {?} */
            var elementsToHighlight = _this._el.nativeElement.querySelectorAll(selector || 'code');
            elementsToHighlight.forEach(function (element) {
                // Highlight element when text is present
                /** @type {?} */
                var observer = new MutationObserver(function () {
                    if (element.childNodes.length === 1 &&
                        element.childNodes[0].nodeName === '#text') {
                        _this.highlightElement(element);
                    }
                });
                observer.observe(element, { childList: true });
                _this._observers.push(observer);
            });
        });
    };
    /**
     * @return {?}
     */
    HighlightChildren.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._observers.forEach(function (observer) { return observer.disconnect(); });
        this._observers = null;
    };
    HighlightChildren.decorators = [
        { type: Directive, args: [{
                    selector: '[highlightChildren]'
                },] }
    ];
    /** @nocollapse */
    HighlightChildren.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: HighlightJS },
        { type: Renderer2 }
    ]; };
    HighlightChildren.propDecorators = {
        selector: [{ type: Input, args: ['highlightChildren',] }]
    };
    return HighlightChildren;
}());
export { HighlightChildren };
if (false) {
    /** @type {?} */
    HighlightChildren.prototype._observers;
    /** @type {?} */
    HighlightChildren.prototype.selector;
    /** @type {?} */
    HighlightChildren.prototype._zone;
    /** @type {?} */
    HighlightChildren.prototype._el;
    /** @type {?} */
    HighlightChildren.prototype._hljs;
    /** @type {?} */
    HighlightChildren.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LWNoaWxkcmVuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhpZ2hsaWdodGpzLyIsInNvdXJjZXMiOlsibGliL2hpZ2hsaWdodC1jaGlsZHJlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRDtJQVFFLDJCQUFvQixLQUFhLEVBQVUsR0FBZSxFQUFVLEtBQWtCLEVBQVUsU0FBb0I7UUFBaEcsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUg1RyxlQUFVLEdBQXVCLEVBQUUsQ0FBQztJQUk1QyxDQUFDOzs7O0lBRUQsOENBQWtCOzs7SUFBbEI7UUFDRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILDRDQUFnQjs7Ozs7SUFBaEIsVUFBaUIsRUFBZTtRQUM5Qix5QkFBeUI7UUFDekIsRUFBRSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILDZDQUFpQjs7Ozs7SUFBakIsVUFBa0IsUUFBZ0I7UUFBbEMsaUJBa0JDO1FBakJDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7O2dCQUNyQixtQkFBbUIsR0FBRyxLQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDO1lBRXZGLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQW9COzs7b0JBRXpDLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDO29CQUNwQyxJQUNFLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUM7d0JBQy9CLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFDMUM7d0JBQ0EsS0FBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUNoQztnQkFDSCxDQUFDLENBQUM7Z0JBQ0YsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztnQkFDN0MsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCx1Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQTBCLElBQUssT0FBQSxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQXJCLENBQXFCLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDOztnQkFyREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7aUJBQ2hDOzs7O2dCQUxtRSxNQUFNO2dCQUFsQixVQUFVO2dCQUN6RCxXQUFXO2dCQUR5QixTQUFTOzs7MkJBU25ELEtBQUssU0FBQyxtQkFBbUI7O0lBZ0Q1Qix3QkFBQztDQUFBLEFBdERELElBc0RDO1NBbkRZLGlCQUFpQjs7O0lBRTVCLHVDQUE0Qzs7SUFDNUMscUNBQTZDOztJQUVqQyxrQ0FBcUI7O0lBQUUsZ0NBQXVCOztJQUFFLGtDQUEwQjs7SUFBRSxzQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEFmdGVyQ29udGVudEluaXQsIElucHV0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhpZ2hsaWdodEpTIH0gZnJvbSAnLi9oaWdobGlnaHQuc2VydmljZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1toaWdobGlnaHRDaGlsZHJlbl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRDaGlsZHJlbiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIHByaXZhdGUgX29ic2VydmVyczogTXV0YXRpb25PYnNlcnZlcltdID0gW107XHJcbiAgQElucHV0KCdoaWdobGlnaHRDaGlsZHJlbicpIHNlbGVjdG9yOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3pvbmU6IE5nWm9uZSwgcHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgX2hsanM6IEhpZ2hsaWdodEpTLCBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmhpZ2hsaWdodENoaWxkcmVuKHRoaXMuc2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlnaGxpZ2h0IGEgY29kZSBibG9ja1xyXG4gICAqIEBwYXJhbSBlbCBDb2RlIGJsb2NrIGVsZW1lbnRcclxuICAgKi9cclxuICBoaWdobGlnaHRFbGVtZW50KGVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgLy8gUmVtb3ZlIGVsZW1lbnQgY2xhc3Nlc1xyXG4gICAgZWwuY2xhc3NOYW1lID0gJyc7XHJcbiAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyhlbCwgJ2hsanMnKTtcclxuICAgIHRoaXMuX2hsanMuaGlnaGxpZ2h0QmxvY2soZWwpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlnaGxpZ2h0IG11bHRpcGxlIGNvZGUgYmxvY2tzXHJcbiAgICogQHBhcmFtIHNlbGVjdG9yIGVsZW1lbnRzIHNlbGVjdG9yXHJcbiAgICovXHJcbiAgaGlnaGxpZ2h0Q2hpbGRyZW4oc2VsZWN0b3I6IHN0cmluZykge1xyXG4gICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnRzVG9IaWdobGlnaHQgPSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IgfHwgJ2NvZGUnKTtcclxuXHJcbiAgICAgIGVsZW1lbnRzVG9IaWdobGlnaHQuZm9yRWFjaCgoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcclxuICAgICAgICAvLyBIaWdobGlnaHQgZWxlbWVudCB3aGVuIHRleHQgaXMgcHJlc2VudFxyXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2hpbGROb2Rlc1swXS5ub2RlTmFtZSA9PT0gJyN0ZXh0J1xyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtjaGlsZExpc3Q6IHRydWV9KTtcclxuICAgICAgICB0aGlzLl9vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX29ic2VydmVycy5mb3JFYWNoKChvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcikgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpKTtcclxuICAgIHRoaXMuX29ic2VydmVycyA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==