{"version":3,"sources":["ng://ngx-highlightjs/lib/highlight.model.ts","ng://ngx-highlightjs/lib/highlight.service.ts","ng://ngx-highlightjs/lib/highlight.ts","ng://ngx-highlightjs/lib/highlight-children.ts","ng://ngx-highlightjs/lib/highlight.module.ts"],"names":["HIGHLIGHT_OPTIONS","InjectionToken","HighlightJS","options","_this","this","languages","map","language","registerLanguage","name","func","config","configure","listLanguages","length","Error","prototype","highlight","value","ignore_illegals","continuation","hljs","highlightAuto","languageSubset","fixMarkup","highlightBlock","block","initHighlighting","getLanguage","Injectable","args","providedIn","Optional","type","Inject","Highlight","_hljs","_zone","highlighted","EventEmitter","ngOnChanges","changes","currentValue","previousValue","highlightElement","code","runOutsideAngular","res","highlightedCode","emit","Directive","host","[class.hljs]","[innerHTML]","selector","NgZone","Input","Output","HighlightChildren","_el","_renderer","_observers","ngAfterContentInit","highlightChildren","el","className","addClass","nativeElement","querySelectorAll","forEach","element","observer","MutationObserver","childNodes","nodeName","observe","childList","push","ngOnDestroy","disconnect","ElementRef","Renderer2","HighlightModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\r\n\r\nexport interface HighlightOptions {\r\n  languages?: Function;\r\n  config?: HighlightConfig;\r\n}\r\n\r\nexport interface HighlightLanguage {\r\n  name: string;\r\n  func: Function;\r\n}\r\n\r\nexport interface HighlightConfig {\r\n  /** tabReplace: a string used to replace TAB characters in indentation. */\r\n  tabReplace?: string;\r\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\r\n  useBR?: boolean;\r\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\r\n  classPrefix?: string;\r\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\r\n  languages?: string[];\r\n}\r\n\r\nexport interface HighlightResult {\r\n  language?: string;\r\n  r?: number;\r\n  second_best?: any;\r\n  top?: any;\r\n  value?: string;\r\n}\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { HighlightConfig, HighlightResult, HighlightLanguage, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\r\nimport hljs from 'highlight.js/lib/highlight.js';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightJS {\r\n  constructor(@Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\r\n    if (options) {\r\n      // Register HighlightJS languages\r\n      options.languages().map((language: HighlightLanguage) =>\r\n        this.registerLanguage(language.name, language.func)\r\n      );\r\n      if (options.config) {\r\n        // Set global config if present\r\n        this.configure(options.config);\r\n      }\r\n    }\r\n    // Throw an error if no languages were registered.\r\n    if (this.listLanguages().length < 1) {\r\n      throw new Error('[HighlightJS]: No languages were registered!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   * @param name Accepts a language name, or an alias\r\n   * @param value A string with the code to highlight.\r\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   * @param continuation An optional mode stack representing unfinished parsing.\r\n   * When present, the function will restart parsing from this state instead of initializing a new one\r\n   */\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult {\r\n    return hljs.highlight(name, value, ignore_illegals, continuation);\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult {\r\n    return hljs.highlightAuto(value, languageSubset);\r\n  }\r\n\r\n  /**\r\n   * Post-processing of the highlighted markup.\r\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n   * Options are set globally with configure.\r\n   * @param value Accepts a string with the highlighted markup\r\n   */\r\n  fixMarkup(value: string): string {\r\n    return hljs.fixMarkup(value);\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the class reference for all available language names and aliases.\r\n   * @param block The element to apply highlight on.\r\n   */\r\n  highlightBlock(block: HTMLElement) {\r\n    hljs.highlightBlock(block);\r\n  }\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config\r\n   */\r\n  configure(config: HighlightConfig) {\r\n    hljs.configure(config);\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n   */\r\n  initHighlighting() {\r\n    hljs.initHighlighting();\r\n  }\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param name A string with the name of the language being registered\r\n   * @param language A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(name: string, language: Function) {\r\n    hljs.registerLanguage(name, language);\r\n  }\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): string[] {\r\n    return hljs.listLanguages();\r\n  }\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): any {\r\n    return hljs.getLanguage(name);\r\n  }\r\n}\r\n","import { Directive, Input, Output, OnChanges, SimpleChanges, EventEmitter, NgZone } from '@angular/core';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HighlightResult } from './highlight.model';\r\n\r\n@Directive({\r\n  host: {\r\n    '[class.hljs]': 'true',\r\n    '[innerHTML]': 'highlightedCode'\r\n  },\r\n  selector: '[highlight]'\r\n})\r\nexport class Highlight implements OnChanges {\r\n\r\n  /** Highlighted Code */\r\n  highlightedCode: string;\r\n\r\n  /** An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  @Input() languages: string[];\r\n\r\n  /** Highlight code input */\r\n  @Input('highlight') code;\r\n\r\n  /** Stream that emits when code string is highlighted */\r\n  @Output() highlighted = new EventEmitter<HighlightResult>();\r\n\r\n  constructor(private _hljs: HighlightJS, private _zone: NgZone) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (\r\n      changes['code'] &&\r\n      changes['code'].currentValue !== changes['code'].previousValue\r\n    ) {\r\n      this.highlightElement(this.code, this.languages);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection and fix markup.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightElement(code: string, languages?: string[]) {\r\n    this._zone.runOutsideAngular(() => {\r\n      const res = this._hljs.highlightAuto(code, languages);\r\n      this.highlightedCode = res.value;\r\n      this.highlighted.emit(res);\r\n    });\r\n  }\r\n}\r\n","import { Directive, AfterContentInit, Input, Renderer2, ElementRef, NgZone, OnDestroy } from '@angular/core';\r\nimport { HighlightJS } from './highlight.service';\r\n\r\n@Directive({\r\n  selector: '[highlightChildren]'\r\n})\r\nexport class HighlightChildren implements AfterContentInit, OnDestroy {\r\n\r\n  private _observers: MutationObserver[] = [];\r\n  @Input('highlightChildren') selector: string;\r\n\r\n  constructor(private _zone: NgZone, private _el: ElementRef, private _hljs: HighlightJS, private _renderer: Renderer2) {\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.highlightChildren(this.selector);\r\n  }\r\n\r\n  /**\r\n   * Highlight a code block\r\n   * @param el Code block element\r\n   */\r\n  highlightElement(el: HTMLElement) {\r\n    // Remove element classes\r\n    el.className = '';\r\n    this._renderer.addClass(el, 'hljs');\r\n    this._hljs.highlightBlock(el);\r\n  }\r\n\r\n  /**\r\n   * Highlight multiple code blocks\r\n   * @param selector elements selector\r\n   */\r\n  highlightChildren(selector: string) {\r\n    this._zone.runOutsideAngular(() => {\r\n      const elementsToHighlight = this._el.nativeElement.querySelectorAll(selector || 'code');\r\n\r\n      elementsToHighlight.forEach((element: HTMLElement) => {\r\n        // Highlight element when text is present\r\n        const observer = new MutationObserver(() => {\r\n          if (\r\n            element.childNodes.length === 1 &&\r\n            element.childNodes[0].nodeName === '#text'\r\n          ) {\r\n            this.highlightElement(element);\r\n          }\r\n        });\r\n        observer.observe(element, {childList: true});\r\n        this._observers.push(observer);\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._observers.forEach((observer: MutationObserver) => observer.disconnect());\r\n    this._observers = null;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { Highlight } from './highlight';\r\nimport { HighlightChildren } from './highlight-children';\r\nimport { HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\r\n\r\n@NgModule({\r\n  declarations: [Highlight, HighlightChildren],\r\n  exports: [Highlight, HighlightChildren]\r\n})\r\nexport class HighlightModule {\r\n  static forRoot(options: HighlightOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: HighlightModule,\r\n      providers: [\r\n        {provide: HIGHLIGHT_OPTIONS, useValue: options}\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}