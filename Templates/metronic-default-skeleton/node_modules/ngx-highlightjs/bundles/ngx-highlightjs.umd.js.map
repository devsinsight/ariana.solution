{"version":3,"file":"ngx-highlightjs.umd.js.map","sources":["ng://ngx-highlightjs/lib/highlight.model.ts","ng://ngx-highlightjs/lib/highlight.service.ts","ng://ngx-highlightjs/lib/highlight.ts","ng://ngx-highlightjs/lib/highlight-children.ts","ng://ngx-highlightjs/lib/highlight.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\r\n\r\nexport interface HighlightOptions {\r\n  languages?: Function;\r\n  config?: HighlightConfig;\r\n}\r\n\r\nexport interface HighlightLanguage {\r\n  name: string;\r\n  func: Function;\r\n}\r\n\r\nexport interface HighlightConfig {\r\n  /** tabReplace: a string used to replace TAB characters in indentation. */\r\n  tabReplace?: string;\r\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\r\n  useBR?: boolean;\r\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\r\n  classPrefix?: string;\r\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\r\n  languages?: string[];\r\n}\r\n\r\nexport interface HighlightResult {\r\n  language?: string;\r\n  r?: number;\r\n  second_best?: any;\r\n  top?: any;\r\n  value?: string;\r\n}\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { HighlightConfig, HighlightResult, HighlightLanguage, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\r\nimport hljs from 'highlight.js/lib/highlight.js';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightJS {\r\n  constructor(@Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\r\n    if (options) {\r\n      // Register HighlightJS languages\r\n      options.languages().map((language: HighlightLanguage) =>\r\n        this.registerLanguage(language.name, language.func)\r\n      );\r\n      if (options.config) {\r\n        // Set global config if present\r\n        this.configure(options.config);\r\n      }\r\n    }\r\n    // Throw an error if no languages were registered.\r\n    if (this.listLanguages().length < 1) {\r\n      throw new Error('[HighlightJS]: No languages were registered!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   * @param name Accepts a language name, or an alias\r\n   * @param value A string with the code to highlight.\r\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   * @param continuation An optional mode stack representing unfinished parsing.\r\n   * When present, the function will restart parsing from this state instead of initializing a new one\r\n   */\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult {\r\n    return hljs.highlight(name, value, ignore_illegals, continuation);\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult {\r\n    return hljs.highlightAuto(value, languageSubset);\r\n  }\r\n\r\n  /**\r\n   * Post-processing of the highlighted markup.\r\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n   * Options are set globally with configure.\r\n   * @param value Accepts a string with the highlighted markup\r\n   */\r\n  fixMarkup(value: string): string {\r\n    return hljs.fixMarkup(value);\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the class reference for all available language names and aliases.\r\n   * @param block The element to apply highlight on.\r\n   */\r\n  highlightBlock(block: HTMLElement) {\r\n    hljs.highlightBlock(block);\r\n  }\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config\r\n   */\r\n  configure(config: HighlightConfig) {\r\n    hljs.configure(config);\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n   */\r\n  initHighlighting() {\r\n    hljs.initHighlighting();\r\n  }\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param name A string with the name of the language being registered\r\n   * @param language A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(name: string, language: Function) {\r\n    hljs.registerLanguage(name, language);\r\n  }\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): string[] {\r\n    return hljs.listLanguages();\r\n  }\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): any {\r\n    return hljs.getLanguage(name);\r\n  }\r\n}\r\n","import { Directive, Input, Output, OnChanges, SimpleChanges, EventEmitter, NgZone } from '@angular/core';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HighlightResult } from './highlight.model';\r\n\r\n@Directive({\r\n  host: {\r\n    '[class.hljs]': 'true',\r\n    '[innerHTML]': 'highlightedCode'\r\n  },\r\n  selector: '[highlight]'\r\n})\r\nexport class Highlight implements OnChanges {\r\n\r\n  /** Highlighted Code */\r\n  highlightedCode: string;\r\n\r\n  /** An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  @Input() languages: string[];\r\n\r\n  /** Highlight code input */\r\n  @Input('highlight') code;\r\n\r\n  /** Stream that emits when code string is highlighted */\r\n  @Output() highlighted = new EventEmitter<HighlightResult>();\r\n\r\n  constructor(private _hljs: HighlightJS, private _zone: NgZone) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (\r\n      changes['code'] &&\r\n      changes['code'].currentValue !== changes['code'].previousValue\r\n    ) {\r\n      this.highlightElement(this.code, this.languages);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection and fix markup.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightElement(code: string, languages?: string[]) {\r\n    this._zone.runOutsideAngular(() => {\r\n      const res = this._hljs.highlightAuto(code, languages);\r\n      this.highlightedCode = res.value;\r\n      this.highlighted.emit(res);\r\n    });\r\n  }\r\n}\r\n","import { Directive, AfterContentInit, Input, Renderer2, ElementRef, NgZone, OnDestroy } from '@angular/core';\r\nimport { HighlightJS } from './highlight.service';\r\n\r\n@Directive({\r\n  selector: '[highlightChildren]'\r\n})\r\nexport class HighlightChildren implements AfterContentInit, OnDestroy {\r\n\r\n  private _observers: MutationObserver[] = [];\r\n  @Input('highlightChildren') selector: string;\r\n\r\n  constructor(private _zone: NgZone, private _el: ElementRef, private _hljs: HighlightJS, private _renderer: Renderer2) {\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.highlightChildren(this.selector);\r\n  }\r\n\r\n  /**\r\n   * Highlight a code block\r\n   * @param el Code block element\r\n   */\r\n  highlightElement(el: HTMLElement) {\r\n    // Remove element classes\r\n    el.className = '';\r\n    this._renderer.addClass(el, 'hljs');\r\n    this._hljs.highlightBlock(el);\r\n  }\r\n\r\n  /**\r\n   * Highlight multiple code blocks\r\n   * @param selector elements selector\r\n   */\r\n  highlightChildren(selector: string) {\r\n    this._zone.runOutsideAngular(() => {\r\n      const elementsToHighlight = this._el.nativeElement.querySelectorAll(selector || 'code');\r\n\r\n      elementsToHighlight.forEach((element: HTMLElement) => {\r\n        // Highlight element when text is present\r\n        const observer = new MutationObserver(() => {\r\n          if (\r\n            element.childNodes.length === 1 &&\r\n            element.childNodes[0].nodeName === '#text'\r\n          ) {\r\n            this.highlightElement(element);\r\n          }\r\n        });\r\n        observer.observe(element, {childList: true});\r\n        this._observers.push(observer);\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._observers.forEach((observer: MutationObserver) => observer.disconnect());\r\n    this._observers = null;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { Highlight } from './highlight';\r\nimport { HighlightChildren } from './highlight-children';\r\nimport { HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\r\n\r\n@NgModule({\r\n  declarations: [Highlight, HighlightChildren],\r\n  exports: [Highlight, HighlightChildren]\r\n})\r\nexport class HighlightModule {\r\n  static forRoot(options: HighlightOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: HighlightModule,\r\n      providers: [\r\n        {provide: HIGHLIGHT_OPTIONS, useValue: options}\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":["InjectionToken","Injectable","Optional","Inject","EventEmitter","Directive","NgZone","Input","Output","ElementRef","Renderer2","NgModule"],"mappings":"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"}
