/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef, NgZone } from '@angular/core';
import { HighlightJS } from './highlight.service';
export class HighlightChildren {
    /**
     * @param {?} _zone
     * @param {?} _el
     * @param {?} _hljs
     * @param {?} _renderer
     */
    constructor(_zone, _el, _hljs, _renderer) {
        this._zone = _zone;
        this._el = _el;
        this._hljs = _hljs;
        this._renderer = _renderer;
        this._observers = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.highlightChildren(this.selector);
    }
    /**
     * Highlight a code block
     * @param {?} el Code block element
     * @return {?}
     */
    highlightElement(el) {
        // Remove element classes
        el.className = '';
        this._renderer.addClass(el, 'hljs');
        this._hljs.highlightBlock(el);
    }
    /**
     * Highlight multiple code blocks
     * @param {?} selector elements selector
     * @return {?}
     */
    highlightChildren(selector) {
        this._zone.runOutsideAngular(() => {
            /** @type {?} */
            const elementsToHighlight = this._el.nativeElement.querySelectorAll(selector || 'code');
            elementsToHighlight.forEach((element) => {
                // Highlight element when text is present
                /** @type {?} */
                const observer = new MutationObserver(() => {
                    if (element.childNodes.length === 1 &&
                        element.childNodes[0].nodeName === '#text') {
                        this.highlightElement(element);
                    }
                });
                observer.observe(element, { childList: true });
                this._observers.push(observer);
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._observers.forEach((observer) => observer.disconnect());
        this._observers = null;
    }
}
HighlightChildren.decorators = [
    { type: Directive, args: [{
                selector: '[highlightChildren]'
            },] }
];
/** @nocollapse */
HighlightChildren.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: HighlightJS },
    { type: Renderer2 }
];
HighlightChildren.propDecorators = {
    selector: [{ type: Input, args: ['highlightChildren',] }]
};
if (false) {
    /** @type {?} */
    HighlightChildren.prototype._observers;
    /** @type {?} */
    HighlightChildren.prototype.selector;
    /** @type {?} */
    HighlightChildren.prototype._zone;
    /** @type {?} */
    HighlightChildren.prototype._el;
    /** @type {?} */
    HighlightChildren.prototype._hljs;
    /** @type {?} */
    HighlightChildren.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LWNoaWxkcmVuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhpZ2hsaWdodGpzLyIsInNvdXJjZXMiOlsibGliL2hpZ2hsaWdodC1jaGlsZHJlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUtsRCxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7O0lBSzVCLFlBQW9CLEtBQWEsRUFBVSxHQUFlLEVBQVUsS0FBa0IsRUFBVSxTQUFvQjtRQUFoRyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWE7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBSDVHLGVBQVUsR0FBdUIsRUFBRSxDQUFDO0lBSTVDLENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFNRCxnQkFBZ0IsQ0FBQyxFQUFlO1FBQzlCLHlCQUF5QjtRQUN6QixFQUFFLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBTUQsaUJBQWlCLENBQUMsUUFBZ0I7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7O2tCQUMxQixtQkFBbUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDO1lBRXZGLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQW9CLEVBQUUsRUFBRTs7O3NCQUU3QyxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUU7b0JBQ3pDLElBQ0UsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQzt3QkFDL0IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUMxQzt3QkFDQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQ2hDO2dCQUNILENBQUMsQ0FBQztnQkFDRixRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQTBCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7OztZQXJERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjthQUNoQzs7OztZQUxtRSxNQUFNO1lBQWxCLFVBQVU7WUFDekQsV0FBVztZQUR5QixTQUFTOzs7dUJBU25ELEtBQUssU0FBQyxtQkFBbUI7Ozs7SUFEMUIsdUNBQTRDOztJQUM1QyxxQ0FBNkM7O0lBRWpDLGtDQUFxQjs7SUFBRSxnQ0FBdUI7O0lBQUUsa0NBQTBCOztJQUFFLHNDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgQWZ0ZXJDb250ZW50SW5pdCwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0SlMgfSBmcm9tICcuL2hpZ2hsaWdodC5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2hpZ2hsaWdodENoaWxkcmVuXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodENoaWxkcmVuIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgcHJpdmF0ZSBfb2JzZXJ2ZXJzOiBNdXRhdGlvbk9ic2VydmVyW10gPSBbXTtcclxuICBASW5wdXQoJ2hpZ2hsaWdodENoaWxkcmVuJykgc2VsZWN0b3I6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfem9uZTogTmdab25lLCBwcml2YXRlIF9lbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfaGxqczogSGlnaGxpZ2h0SlMsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgIHRoaXMuaGlnaGxpZ2h0Q2hpbGRyZW4odGhpcy5zZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIaWdobGlnaHQgYSBjb2RlIGJsb2NrXHJcbiAgICogQHBhcmFtIGVsIENvZGUgYmxvY2sgZWxlbWVudFxyXG4gICAqL1xyXG4gIGhpZ2hsaWdodEVsZW1lbnQoZWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAvLyBSZW1vdmUgZWxlbWVudCBjbGFzc2VzXHJcbiAgICBlbC5jbGFzc05hbWUgPSAnJztcclxuICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKGVsLCAnaGxqcycpO1xyXG4gICAgdGhpcy5faGxqcy5oaWdobGlnaHRCbG9jayhlbCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIaWdobGlnaHQgbXVsdGlwbGUgY29kZSBibG9ja3NcclxuICAgKiBAcGFyYW0gc2VsZWN0b3IgZWxlbWVudHMgc2VsZWN0b3JcclxuICAgKi9cclxuICBoaWdobGlnaHRDaGlsZHJlbihzZWxlY3Rvcjogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgY29uc3QgZWxlbWVudHNUb0hpZ2hsaWdodCA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciB8fCAnY29kZScpO1xyXG5cclxuICAgICAgZWxlbWVudHNUb0hpZ2hsaWdodC5mb3JFYWNoKChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xyXG4gICAgICAgIC8vIEhpZ2hsaWdodCBlbGVtZW50IHdoZW4gdGV4dCBpcyBwcmVzZW50XHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICAgICAgZWxlbWVudC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lID09PSAnI3RleHQnXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwge2NoaWxkTGlzdDogdHJ1ZX0pO1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fb2JzZXJ2ZXJzLmZvckVhY2goKG9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyKSA9PiBvYnNlcnZlci5kaXNjb25uZWN0KCkpO1xyXG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbnVsbDtcclxuICB9XHJcbn1cclxuIl19