/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone, Inject } from '@angular/core';
import { fromEvent, race } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { takeUntil, filter, delay, withLatestFrom, map } from 'rxjs/operators';
import { Key } from './key';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/** @type {?} */
var isHTMLElementContainedIn = function (element, array) {
    return array ? array.some(function (item) { return item.contains(element); }) : false;
};
var ɵ0 = isHTMLElementContainedIn;
var AutoClose = /** @class */ (function () {
    function AutoClose(_ngZone, _document) {
        this._ngZone = _ngZone;
        this._document = _document;
    }
    /**
     * @param {?} autoClose
     * @param {?} close
     * @param {?} closed$
     * @param {?} insideElements
     * @param {?=} ignoreElements
     * @return {?}
     */
    AutoClose.prototype.install = /**
     * @param {?} autoClose
     * @param {?} close
     * @param {?} closed$
     * @param {?} insideElements
     * @param {?=} ignoreElements
     * @return {?}
     */
    function (autoClose, close, closed$, insideElements, ignoreElements) {
        var _this = this;
        // closing on ESC and outside clicks
        if (autoClose) {
            this._ngZone.runOutsideAngular(function () {
                /** @type {?} */
                var shouldCloseOnClick = function (event) {
                    /** @type {?} */
                    var element = (/** @type {?} */ (event.target));
                    if (event.button === 2 || isHTMLElementContainedIn(element, ignoreElements)) {
                        return false;
                    }
                    if (autoClose === 'inside') {
                        return isHTMLElementContainedIn(element, insideElements);
                    }
                    else if (autoClose === 'outside') {
                        return !isHTMLElementContainedIn(element, insideElements);
                    }
                    else /* if (autoClose === true) */ {
                        return true;
                    }
                };
                /** @type {?} */
                var escapes$ = fromEvent(_this._document, 'keydown')
                    .pipe(takeUntil(closed$), 
                // tslint:disable-next-line:deprecation
                filter(function (e) { return e.which === Key.Escape; }));
                // we have to pre-calculate 'shouldCloseOnClick' on 'mousedown',
                // because on 'mouseup' DOM nodes might be detached
                /** @type {?} */
                var mouseDowns$ = fromEvent(_this._document, 'mousedown').pipe(map(shouldCloseOnClick), takeUntil(closed$));
                /** @type {?} */
                var outsideClicks$ = fromEvent(_this._document, 'mouseup')
                    .pipe(withLatestFrom(mouseDowns$), filter(function (_a) {
                    var _b = tslib_1.__read(_a, 2), _ = _b[0], shouldClose = _b[1];
                    return shouldClose;
                }), delay(0), takeUntil(closed$));
                race([escapes$, outsideClicks$]).subscribe(function () { return _this._ngZone.run(close); });
            });
        }
    };
    AutoClose.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    AutoClose.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ AutoClose.ngInjectableDef = i0.defineInjectable({ factory: function AutoClose_Factory() { return new AutoClose(i0.inject(i0.NgZone), i0.inject(i1.DOCUMENT)); }, token: AutoClose, providedIn: "root" });
    return AutoClose;
}());
export { AutoClose };
if (false) {
    /** @type {?} */
    AutoClose.prototype._ngZone;
    /** @type {?} */
    AutoClose.prototype._document;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2Nsb3NlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvIiwic291cmNlcyI6WyJ1dGlsL2F1dG9jbG9zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUMsU0FBUyxFQUFjLElBQUksRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RSxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDOzs7O0lBRXBCLHdCQUF3QixHQUFHLFVBQUMsT0FBb0IsRUFBRSxLQUFxQjtJQUN6RSxPQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztBQUExRCxDQUEwRDs7QUFFOUQ7SUFFRSxtQkFBb0IsT0FBZSxFQUE0QixTQUFjO1FBQXpELFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBNEIsY0FBUyxHQUFULFNBQVMsQ0FBSztJQUFHLENBQUM7Ozs7Ozs7OztJQUVqRiwyQkFBTzs7Ozs7Ozs7SUFBUCxVQUNJLFNBQXlDLEVBQUUsS0FBaUIsRUFBRSxPQUF3QixFQUN0RixjQUE2QixFQUFFLGNBQThCO1FBRmpFLGlCQTBDQztRQXZDQyxvQ0FBb0M7UUFDcEMsSUFBSSxTQUFTLEVBQUU7WUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztvQkFFdkIsa0JBQWtCLEdBQUcsVUFBQyxLQUFpQjs7d0JBQ3JDLE9BQU8sR0FBRyxtQkFBQSxLQUFLLENBQUMsTUFBTSxFQUFlO29CQUMzQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsRUFBRTt3QkFDM0UsT0FBTyxLQUFLLENBQUM7cUJBQ2Q7b0JBQ0QsSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO3dCQUMxQixPQUFPLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztxQkFDMUQ7eUJBQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO3dCQUNsQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO3FCQUMzRDt5QkFBTSw2QkFBNkIsQ0FBQzt3QkFDbkMsT0FBTyxJQUFJLENBQUM7cUJBQ2I7Z0JBQ0gsQ0FBQzs7b0JBRUssUUFBUSxHQUFHLFNBQVMsQ0FBZ0IsS0FBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7cUJBQzlDLElBQUksQ0FDRCxTQUFTLENBQUMsT0FBTyxDQUFDO2dCQUNsQix1Q0FBdUM7Z0JBQ3ZDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLE1BQU0sRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDOzs7O29CQUt2RCxXQUFXLEdBQ2IsU0FBUyxDQUFhLEtBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7b0JBRWxHLGNBQWMsR0FBRyxTQUFTLENBQWEsS0FBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7cUJBQzNDLElBQUksQ0FDRCxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQUMsRUFBZ0I7d0JBQWhCLDBCQUFnQixFQUFmLFNBQUMsRUFBRSxtQkFBVztvQkFBTSxPQUFBLFdBQVc7Z0JBQVgsQ0FBVyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNoRixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBR2xELElBQUksQ0FBUSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztZQUNuRixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7Z0JBOUNGLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7Z0JBVFosTUFBTTtnREFXYyxNQUFNLFNBQUMsUUFBUTs7O29CQVh2RDtDQXdEQyxBQS9DRCxJQStDQztTQTlDWSxTQUFTOzs7SUFDUiw0QkFBdUI7O0lBQUUsOEJBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBOZ1pvbmUsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2Zyb21FdmVudCwgT2JzZXJ2YWJsZSwgcmFjZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHt0YWtlVW50aWwsIGZpbHRlciwgZGVsYXksIHdpdGhMYXRlc3RGcm9tLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7S2V5fSBmcm9tICcuL2tleSc7XG5cbmNvbnN0IGlzSFRNTEVsZW1lbnRDb250YWluZWRJbiA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgYXJyYXk/OiBIVE1MRWxlbWVudFtdKSA9PlxuICAgIGFycmF5ID8gYXJyYXkuc29tZShpdGVtID0+IGl0ZW0uY29udGFpbnMoZWxlbWVudCkpIDogZmFsc2U7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIEF1dG9DbG9zZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25nWm9uZTogTmdab25lLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2N1bWVudDogYW55KSB7fVxuXG4gIGluc3RhbGwoXG4gICAgICBhdXRvQ2xvc2U6IGJvb2xlYW4gfCAnaW5zaWRlJyB8ICdvdXRzaWRlJywgY2xvc2U6ICgpID0+IHZvaWQsIGNsb3NlZCQ6IE9ic2VydmFibGU8YW55PixcbiAgICAgIGluc2lkZUVsZW1lbnRzOiBIVE1MRWxlbWVudFtdLCBpZ25vcmVFbGVtZW50cz86IEhUTUxFbGVtZW50W10pIHtcbiAgICAvLyBjbG9zaW5nIG9uIEVTQyBhbmQgb3V0c2lkZSBjbGlja3NcbiAgICBpZiAoYXV0b0Nsb3NlKSB7XG4gICAgICB0aGlzLl9uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHNob3VsZENsb3NlT25DbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMiB8fCBpc0hUTUxFbGVtZW50Q29udGFpbmVkSW4oZWxlbWVudCwgaWdub3JlRWxlbWVudHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhdXRvQ2xvc2UgPT09ICdpbnNpZGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNIVE1MRWxlbWVudENvbnRhaW5lZEluKGVsZW1lbnQsIGluc2lkZUVsZW1lbnRzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGF1dG9DbG9zZSA9PT0gJ291dHNpZGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzSFRNTEVsZW1lbnRDb250YWluZWRJbihlbGVtZW50LCBpbnNpZGVFbGVtZW50cyk7XG4gICAgICAgICAgfSBlbHNlIC8qIGlmIChhdXRvQ2xvc2UgPT09IHRydWUpICovIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBlc2NhcGVzJCA9IGZyb21FdmVudDxLZXlib2FyZEV2ZW50Pih0aGlzLl9kb2N1bWVudCwgJ2tleWRvd24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2VVbnRpbChjbG9zZWQkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkZXByZWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKGUgPT4gZS53aGljaCA9PT0gS2V5LkVzY2FwZSkpO1xuXG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBwcmUtY2FsY3VsYXRlICdzaG91bGRDbG9zZU9uQ2xpY2snIG9uICdtb3VzZWRvd24nLFxuICAgICAgICAvLyBiZWNhdXNlIG9uICdtb3VzZXVwJyBET00gbm9kZXMgbWlnaHQgYmUgZGV0YWNoZWRcbiAgICAgICAgY29uc3QgbW91c2VEb3ducyQgPVxuICAgICAgICAgICAgZnJvbUV2ZW50PE1vdXNlRXZlbnQ+KHRoaXMuX2RvY3VtZW50LCAnbW91c2Vkb3duJykucGlwZShtYXAoc2hvdWxkQ2xvc2VPbkNsaWNrKSwgdGFrZVVudGlsKGNsb3NlZCQpKTtcblxuICAgICAgICBjb25zdCBvdXRzaWRlQ2xpY2tzJCA9IGZyb21FdmVudDxNb3VzZUV2ZW50Pih0aGlzLl9kb2N1bWVudCwgJ21vdXNldXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhMYXRlc3RGcm9tKG1vdXNlRG93bnMkKSwgZmlsdGVyKChbXywgc2hvdWxkQ2xvc2VdKSA9PiBzaG91bGRDbG9zZSksIGRlbGF5KDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKGNsb3NlZCQpKTtcblxuXG4gICAgICAgIHJhY2U8RXZlbnQ+KFtlc2NhcGVzJCwgb3V0c2lkZUNsaWNrcyRdKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5fbmdab25lLnJ1bihjbG9zZSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=