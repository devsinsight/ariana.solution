import { ChangeDetectorRef, Directive, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { BehaviorSubject, forkJoin, from, merge, of } from 'rxjs';
import { catchError, every, first, map, mergeAll, mergeMap, skip, switchMap, take, tap } from 'rxjs/operators';
import { Router } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsPredefinedStrategies = {
    REMOVE: 'remove',
    SHOW: 'show'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsConfigurationStore = /** @class */ (function () {
    function NgxPermissionsConfigurationStore() {
        this.strategiesSource = new BehaviorSubject({});
        this.strategies$ = this.strategiesSource.asObservable();
    }
    NgxPermissionsConfigurationStore.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxPermissionsConfigurationStore.ctorParameters = function () { return []; };
    return NgxPermissionsConfigurationStore;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');
var NgxPermissionsConfigurationService = /** @class */ (function () {
    function NgxPermissionsConfigurationService(isolate, configurationStore) {
        if (isolate === void 0) { isolate = false; }
        this.isolate = isolate;
        this.configurationStore = configurationStore;
        this.strategiesSource = this.isolate ? new BehaviorSubject({}) : this.configurationStore.strategiesSource;
        this.strategies$ = this.strategiesSource.asObservable();
        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;
        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.setDefaultOnAuthorizedStrategy = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.isolate) {
            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
        }
        else {
            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.setDefaultOnUnauthorizedStrategy = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.isolate) {
            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
        }
        else {
            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;
        }
    };
    /**
     * @param {?} key
     * @param {?} func
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.addPermissionStrategy = /**
     * @param {?} key
     * @param {?} func
     * @return {?}
     */
    function (key, func) {
        this.strategiesSource.value[key] = func;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.getStrategy = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.strategiesSource.value[key];
    };
    /**
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.getAllStrategies = /**
     * @return {?}
     */
    function () {
        return this.strategiesSource.value;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.getDefinedStrategy = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {
            return name;
        }
        else {
            throw new Error("No ' " + name + " ' strategy is found please define one");
        }
    };
    /**
     * @param {?} strategy
     * @return {?}
     */
    NgxPermissionsConfigurationService.prototype.isPredefinedStrategy = /**
     * @param {?} strategy
     * @return {?}
     */
    function (strategy) {
        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;
    };
    NgxPermissionsConfigurationService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxPermissionsConfigurationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [USE_CONFIGURATION_STORE,] },] },
        { type: NgxPermissionsConfigurationStore, },
    ]; };
    return NgxPermissionsConfigurationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsStore = /** @class */ (function () {
    function NgxPermissionsStore() {
        this.permissionsSource = new BehaviorSubject({});
        this.permissions$ = this.permissionsSource.asObservable();
    }
    NgxPermissionsStore.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxPermissionsStore.ctorParameters = function () { return []; };
    return NgxPermissionsStore;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} functionToCheck
 * @return {?}
 */
function isFunction(functionToCheck) {
    var /** @type {?} */ getType = {};
    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';
}
/**
 * @param {?} value
 * @return {?}
 */
function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== '[object Object]') {
        return false;
    }
    else {
        var /** @type {?} */ prototype = Object.getPrototypeOf(value);
        return prototype === null || prototype === Object.prototype;
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function isString(value) {
    return !!value && typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
function isBoolean(value) {
    return typeof value === 'boolean';
}
/**
 * @param {?} promise
 * @return {?}
 */
function isPromise(promise) {
    return Object.prototype.toString.call(promise) === '[object Promise]';
}
/**
 * @param {?} value
 * @return {?}
 */
function notEmptyValue(value) {
    if (Array.isArray(value)) {
        return value.length > 0;
    }
    return !!value;
}
/**
 * @param {?} value
 * @return {?}
 */
function transformStringToArray(value) {
    if (isString(value)) {
        return [value];
    }
    return value;
}

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');
var NgxPermissionsService = /** @class */ (function () {
    function NgxPermissionsService(isolate, permissionsStore) {
        if (isolate === void 0) { isolate = false; }
        this.isolate = isolate;
        this.permissionsStore = permissionsStore;
        this.permissionsSource = isolate ? new BehaviorSubject({}) : permissionsStore.permissionsSource;
        this.permissions$ = this.permissionsSource.asObservable();
    }
    /**
     * Remove all permissions from permissions source
     * @return {?}
     */
    NgxPermissionsService.prototype.flushPermissions = /**
     * Remove all permissions from permissions source
     * @return {?}
     */
    function () {
        this.permissionsSource.next({});
    };
    /**
     * @param {?} permission
     * @return {?}
     */
    NgxPermissionsService.prototype.hasPermission = /**
     * @param {?} permission
     * @return {?}
     */
    function (permission) {
        if (!permission || (Array.isArray(permission) && permission.length === 0)) {
            return Promise.resolve(true);
        }
        permission = transformStringToArray(permission);
        return this.hasArrayPermission(permission);
    };
    /**
     * @param {?} permissions
     * @param {?=} validationFunction
     * @return {?}
     */
    NgxPermissionsService.prototype.loadPermissions = /**
     * @param {?} permissions
     * @param {?=} validationFunction
     * @return {?}
     */
    function (permissions, validationFunction) {
        var _this = this;
        var /** @type {?} */ newPermissions = permissions.reduce(function (source, p) {
            return _this.reducePermission(source, p, validationFunction);
        }, {});
        this.permissionsSource.next(newPermissions);
    };
    /**
     * @param {?} permission
     * @param {?=} validationFunction
     * @return {?}
     */
    NgxPermissionsService.prototype.addPermission = /**
     * @param {?} permission
     * @param {?=} validationFunction
     * @return {?}
     */
    function (permission, validationFunction) {
        var _this = this;
        if (Array.isArray(permission)) {
            var /** @type {?} */ permissions = permission.reduce(function (source, p) {
                return _this.reducePermission(source, p, validationFunction);
            }, this.permissionsSource.value);
            this.permissionsSource.next(permissions);
        }
        else {
            var /** @type {?} */ permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);
            this.permissionsSource.next(permissions);
        }
    };
    /**
     * @param {?} permissionName
     * @return {?}
     */
    NgxPermissionsService.prototype.removePermission = /**
     * @param {?} permissionName
     * @return {?}
     */
    function (permissionName) {
        var /** @type {?} */ permissions = __assign({}, this.permissionsSource.value);
        delete permissions[permissionName];
        this.permissionsSource.next(permissions);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxPermissionsService.prototype.getPermission = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.permissionsSource.value[name];
    };
    /**
     * @return {?}
     */
    NgxPermissionsService.prototype.getPermissions = /**
     * @return {?}
     */
    function () {
        return this.permissionsSource.value;
    };
    /**
     * @param {?} source
     * @param {?} name
     * @param {?=} validationFunction
     * @return {?}
     */
    NgxPermissionsService.prototype.reducePermission = /**
     * @param {?} source
     * @param {?} name
     * @param {?=} validationFunction
     * @return {?}
     */
    function (source, name, validationFunction) {
        if (!!validationFunction && isFunction(validationFunction)) {
            return __assign({}, source, (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
        }
        else {
            return __assign({}, source, (_b = {}, _b[name] = { name: name }, _b));
        }
        var _a, _b;
    };
    /**
     * @param {?} permissions
     * @return {?}
     */
    NgxPermissionsService.prototype.hasArrayPermission = /**
     * @param {?} permissions
     * @return {?}
     */
    function (permissions) {
        var _this = this;
        var /** @type {?} */ promises = permissions.map(function (key) {
            if (_this.hasPermissionValidationFunction(key)) {
                var /** @type {?} */ immutableValue_1 = __assign({}, _this.permissionsSource.value);
                var /** @type {?} */ validationFunction_1 = /** @type {?} */ (_this.permissionsSource.value[key].validationFunction);
                return of(null).pipe(map(function () { return validationFunction_1(key, immutableValue_1); }), switchMap(function (promise) {
                    return isBoolean(promise) ?
                        of(/** @type {?} */ (promise)) : /** @type {?} */ (promise);
                }), catchError(function () { return of(false); }));
            }
            // check for name of the permission if there is no validation function
            return of(!!_this.permissionsSource.value[key]);
        });
        return from(promises).pipe(mergeAll(), first(function (data) { return data !== false; }, false), map(function (data) { return data === false ? false : true; })).toPromise().then(function (data) { return data; });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NgxPermissionsService.prototype.hasPermissionValidationFunction = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return !!this.permissionsSource.value[key] &&
            !!this.permissionsSource.value[key].validationFunction &&
            isFunction(this.permissionsSource.value[key].validationFunction);
    };
    NgxPermissionsService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxPermissionsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [USE_PERMISSIONS_STORE,] },] },
        { type: NgxPermissionsStore, },
    ]; };
    return NgxPermissionsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxRolesStore = /** @class */ (function () {
    function NgxRolesStore() {
        this.rolesSource = new BehaviorSubject({});
        this.roles$ = this.rolesSource.asObservable();
    }
    return NgxRolesStore;
}());

var __assign$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');
var NgxRolesService = /** @class */ (function () {
    function NgxRolesService(isolate, rolesStore, permissionsService) {
        if (isolate === void 0) { isolate = false; }
        this.isolate = isolate;
        this.rolesStore = rolesStore;
        this.permissionsService = permissionsService;
        this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;
        this.roles$ = this.rolesSource.asObservable();
    }
    /**
     * @param {?} name
     * @param {?} validationFunction
     * @return {?}
     */
    NgxRolesService.prototype.addRole = /**
     * @param {?} name
     * @param {?} validationFunction
     * @return {?}
     */
    function (name, validationFunction) {
        var /** @type {?} */ roles = __assign$1({}, this.rolesSource.value, (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
        this.rolesSource.next(roles);
        var _a;
    };
    /**
     * @param {?} rolesObj
     * @return {?}
     */
    NgxRolesService.prototype.addRoles = /**
     * @param {?} rolesObj
     * @return {?}
     */
    function (rolesObj) {
        var _this = this;
        Object.keys(rolesObj).forEach(function (key, index) {
            _this.addRole(key, rolesObj[key]);
        });
    };
    /**
     * @return {?}
     */
    NgxRolesService.prototype.flushRoles = /**
     * @return {?}
     */
    function () {
        this.rolesSource.next({});
    };
    /**
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.removeRole = /**
     * @param {?} roleName
     * @return {?}
     */
    function (roleName) {
        var /** @type {?} */ roles = __assign$1({}, this.rolesSource.value);
        delete roles[roleName];
        this.rolesSource.next(roles);
    };
    /**
     * @return {?}
     */
    NgxRolesService.prototype.getRoles = /**
     * @return {?}
     */
    function () {
        return this.rolesSource.value;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxRolesService.prototype.getRole = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.rolesSource.value[name];
    };
    /**
     * @param {?} names
     * @return {?}
     */
    NgxRolesService.prototype.hasOnlyRoles = /**
     * @param {?} names
     * @return {?}
     */
    function (names) {
        var /** @type {?} */ isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);
        if (isNamesEmpty)
            return Promise.resolve(true);
        names = transformStringToArray(names);
        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])
            .then(function (_a) {
            var hasRoles = _a[0], hasPermissions = _a[1];
            return hasRoles || hasPermissions;
        });
    };
    /**
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.hasRoleKey = /**
     * @param {?} roleName
     * @return {?}
     */
    function (roleName) {
        var _this = this;
        var /** @type {?} */ promises = roleName.map(function (key) {
            var /** @type {?} */ hasValidationFunction = !!_this.rolesSource.value[key] &&
                !!_this.rolesSource.value[key].validationFunction &&
                isFunction(_this.rolesSource.value[key].validationFunction);
            if (hasValidationFunction && !isPromise(_this.rolesSource.value[key].validationFunction)) {
                var /** @type {?} */ validationFunction_1 = /** @type {?} */ (_this.rolesSource.value[key].validationFunction);
                return of(null).pipe(map(function () { return validationFunction_1(); }), switchMap(function (promise) {
                    return isBoolean(promise) ?
                        of(/** @type {?} */ (promise)) : /** @type {?} */ (promise);
                }), catchError(function () { return of(false); }));
            }
            return of(false);
        });
        return from(promises).pipe(mergeAll(), first(function (data) { return data !== false; }, false), map(function (data) { return data !== false; })).toPromise().then(function (data) { return data; });
    };
    /**
     * @param {?} roles
     * @param {?} roleNames
     * @return {?}
     */
    NgxRolesService.prototype.hasRolePermission = /**
     * @param {?} roles
     * @param {?} roleNames
     * @return {?}
     */
    function (roles, roleNames) {
        var _this = this;
        return from(roleNames).pipe(mergeMap(function (key) {
            if (roles[key] && Array.isArray(roles[key].validationFunction)) {
                return from(/** @type {?} */ (roles[key].validationFunction)).pipe(mergeMap(function (permission) { return _this.permissionsService.hasPermission(permission); }), every(function (hasPermissions) { return hasPermissions === true; }));
            }
            return of(false);
        }), first(function (hasPermission) { return hasPermission === true; }, false)).toPromise();
    };
    NgxRolesService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxRolesService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [USE_ROLES_STORE,] },] },
        { type: NgxRolesStore, },
        { type: NgxPermissionsService, },
    ]; };
    return NgxRolesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsDirective = /** @class */ (function () {
    function NgxPermissionsDirective(permissionsService, configurationService, rolesService, viewContainer, changeDetector, templateRef) {
        this.permissionsService = permissionsService;
        this.configurationService = configurationService;
        this.rolesService = rolesService;
        this.viewContainer = viewContainer;
        this.changeDetector = changeDetector;
        this.templateRef = templateRef;
        this.permissionsAuthorized = new EventEmitter();
        this.permissionsUnauthorized = new EventEmitter();
        this.firstMergeUnusedRun = 1;
    }
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.viewContainer.clear();
        this.initPermissionSubscription = this.validateExceptOnlyPermissions();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPermissionsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        var /** @type {?} */ onlyChanges = changes['ngxPermissionsOnly'];
        var /** @type {?} */ exceptChanges = changes['ngxPermissionsExcept'];
        if (onlyChanges || exceptChanges) {
            // Due to bug when you pass empty array
            if (onlyChanges && onlyChanges.firstChange)
                return;
            if (exceptChanges && exceptChanges.firstChange)
                return;
            merge(this.permissionsService.permissions$, this.rolesService.roles$)
                .pipe(skip(this.firstMergeUnusedRun), take(1))
                .subscribe(function () {
                if (notEmptyValue(_this.ngxPermissionsExcept)) {
                    _this.validateExceptAndOnlyPermissions();
                    return;
                }
                if (notEmptyValue(_this.ngxPermissionsOnly)) {
                    _this.validateOnlyPermissions();
                    return;
                }
                _this.handleAuthorisedPermission(_this.getAuthorisedTemplates());
            });
        }
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.initPermissionSubscription) {
            this.initPermissionSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.validateExceptOnlyPermissions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return merge(this.permissionsService.permissions$, this.rolesService.roles$)
            .pipe(skip(this.firstMergeUnusedRun))
            .subscribe(function () {
            if (notEmptyValue(_this.ngxPermissionsExcept)) {
                _this.validateExceptAndOnlyPermissions();
                return;
            }
            if (notEmptyValue(_this.ngxPermissionsOnly)) {
                _this.validateOnlyPermissions();
                return;
            }
            _this.handleAuthorisedPermission(_this.getAuthorisedTemplates());
        });
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.validateExceptAndOnlyPermissions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsExcept), this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)])
            .then(function (_a) {
            var hasPermission = _a[0], hasRole = _a[1];
            if (hasPermission || hasRole) {
                _this.handleUnauthorisedPermission(_this.ngxPermissionsExceptElse || _this.ngxPermissionsElse);
                return;
            }
            if (!!_this.ngxPermissionsOnly)
                throw false;
            _this.handleAuthorisedPermission(_this.ngxPermissionsExceptThen || _this.ngxPermissionsThen || _this.templateRef);
        }).catch(function () {
            if (!!_this.ngxPermissionsOnly) {
                _this.validateOnlyPermissions();
            }
            else {
                _this.handleAuthorisedPermission(_this.ngxPermissionsExceptThen || _this.ngxPermissionsThen || _this.templateRef);
            }
        });
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.validateOnlyPermissions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)])
            .then(function (_a) {
            var hasPermissions = _a[0], hasRoles = _a[1];
            if (hasPermissions || hasRoles) {
                _this.handleAuthorisedPermission(_this.ngxPermissionsOnlyThen || _this.ngxPermissionsThen || _this.templateRef);
            }
            else {
                _this.handleUnauthorisedPermission(_this.ngxPermissionsOnlyElse || _this.ngxPermissionsElse);
            }
        }).catch(function () {
            _this.handleUnauthorisedPermission(_this.ngxPermissionsOnlyElse || _this.ngxPermissionsElse);
        });
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NgxPermissionsDirective.prototype.handleUnauthorisedPermission = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState)
            return;
        this.currentAuthorizedState = false;
        this.permissionsUnauthorized.emit();
        if (this.getUnAuthorizedStrategyInput()) {
            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());
            return;
        }
        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {
            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);
        }
        else {
            this.showTemplateBlockInView(template);
        }
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NgxPermissionsDirective.prototype.handleAuthorisedPermission = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState)
            return;
        this.currentAuthorizedState = true;
        this.permissionsAuthorized.emit();
        if (this.getAuthorizedStrategyInput()) {
            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());
            return;
        }
        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {
            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);
        }
        else {
            this.showTemplateBlockInView(template);
        }
    };
    /**
     * @param {?} strategy
     * @return {?}
     */
    NgxPermissionsDirective.prototype.applyStrategyAccordingToStrategyType = /**
     * @param {?} strategy
     * @return {?}
     */
    function (strategy) {
        if (isString(strategy)) {
            this.applyStrategy(strategy);
            return;
        }
        if (isFunction(strategy)) {
            this.showTemplateBlockInView(this.templateRef);
            (/** @type {?} */ (strategy))(this.templateRef);
            return;
        }
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NgxPermissionsDirective.prototype.showTemplateBlockInView = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        this.viewContainer.clear();
        if (!template) {
            return;
        }
        this.viewContainer.createEmbeddedView(template);
        this.changeDetector.markForCheck();
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.getAuthorisedTemplates = /**
     * @return {?}
     */
    function () {
        return this.ngxPermissionsOnlyThen
            || this.ngxPermissionsExceptThen
            || this.ngxPermissionsThen
            || this.templateRef;
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.elseBlockDefined = /**
     * @return {?}
     */
    function () {
        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.thenBlockDefined = /**
     * @return {?}
     */
    function () {
        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.getAuthorizedStrategyInput = /**
     * @return {?}
     */
    function () {
        return this.ngxPermissionsOnlyAuthorisedStrategy ||
            this.ngxPermissionsExceptAuthorisedStrategy ||
            this.ngxPermissionsAuthorisedStrategy;
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.getUnAuthorizedStrategyInput = /**
     * @return {?}
     */
    function () {
        return this.ngxPermissionsOnlyUnauthorisedStrategy ||
            this.ngxPermissionsExceptUnauthorisedStrategy ||
            this.ngxPermissionsUnauthorisedStrategy;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NgxPermissionsDirective.prototype.applyStrategy = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str === NgxPermissionsPredefinedStrategies.SHOW) {
            this.showTemplateBlockInView(this.templateRef);
            return;
        }
        if (str === NgxPermissionsPredefinedStrategies.REMOVE) {
            this.viewContainer.clear();
            return;
        }
        var /** @type {?} */ strategy = this.configurationService.getStrategy(str);
        this.showTemplateBlockInView(this.templateRef);
        strategy(this.templateRef);
    };
    NgxPermissionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] },
    ];
    /** @nocollapse */
    NgxPermissionsDirective.ctorParameters = function () { return [
        { type: NgxPermissionsService, },
        { type: NgxPermissionsConfigurationService, },
        { type: NgxRolesService, },
        { type: ViewContainerRef, },
        { type: ChangeDetectorRef, },
        { type: TemplateRef, },
    ]; };
    NgxPermissionsDirective.propDecorators = {
        "ngxPermissionsOnly": [{ type: Input },],
        "ngxPermissionsOnlyThen": [{ type: Input },],
        "ngxPermissionsOnlyElse": [{ type: Input },],
        "ngxPermissionsExcept": [{ type: Input },],
        "ngxPermissionsExceptElse": [{ type: Input },],
        "ngxPermissionsExceptThen": [{ type: Input },],
        "ngxPermissionsThen": [{ type: Input },],
        "ngxPermissionsElse": [{ type: Input },],
        "ngxPermissionsOnlyAuthorisedStrategy": [{ type: Input },],
        "ngxPermissionsOnlyUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsExceptUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsExceptAuthorisedStrategy": [{ type: Input },],
        "ngxPermissionsUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsAuthorisedStrategy": [{ type: Input },],
        "permissionsAuthorized": [{ type: Output },],
        "permissionsUnauthorized": [{ type: Output },],
    };
    return NgxPermissionsDirective;
}());

var __assign$2 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsGuard = /** @class */ (function () {
    function NgxPermissionsGuard(permissionsService, rolesService, router) {
        this.permissionsService = permissionsService;
        this.rolesService = rolesService;
        this.router = router;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.hasPermissions(route, state);
    };
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.canActivateChild = /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    function (childRoute, state) {
        return this.hasPermissions(childRoute, state);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    NgxPermissionsGuard.prototype.canLoad = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.hasPermissions(route);
    };
    /**
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.hasPermissions = /**
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    function (route, state) {
        var /** @type {?} */ purePermissions = !!route && route.data ? /** @type {?} */ (route.data['permissions']) : {};
        var /** @type {?} */ permissions = this.transformPermission(purePermissions, route, state);
        if (this.isParameterAvailable(permissions.except)) {
            return this.passingExceptPermissionsValidation(permissions, route, state);
        }
        if (this.isParameterAvailable(permissions.only)) {
            return this.passingOnlyPermissionsValidation(permissions, route, state);
        }
        return true;
    };
    /**
     * @param {?} purePermissions
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.transformPermission = /**
     * @param {?} purePermissions
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (purePermissions, route, state) {
        var /** @type {?} */ permissions = __assign$2({}, purePermissions);
        if (isFunction(permissions.except)) {
            permissions.except = (/** @type {?} */ (permissions.except))(route, state);
        }
        if (isFunction(permissions.only)) {
            permissions.only = (/** @type {?} */ (permissions.only))(route, state);
        }
        permissions.except = transformStringToArray(permissions.except);
        permissions.only = transformStringToArray(permissions.only);
        return permissions;
    };
    /**
     * @param {?} permission
     * @return {?}
     */
    NgxPermissionsGuard.prototype.isParameterAvailable = /**
     * @param {?} permission
     * @return {?}
     */
    function (permission) {
        return !!(permission) && permission.length > 0;
    };
    /**
     * @param {?} permissions
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.passingExceptPermissionsValidation = /**
     * @param {?} permissions
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (permissions, route, state) {
        var _this = this;
        if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo)))) {
            var /** @type {?} */ failedPermission_1 = '';
            return from(/** @type {?} */ (permissions.except)).pipe(mergeMap(function (data) {
                return forkJoin([
                    _this.permissionsService.hasPermission(/** @type {?} */ (data)),
                    _this.rolesService.hasOnlyRoles(/** @type {?} */ (data))
                ]).pipe(tap(function (hasPermissions) {
                    var /** @type {?} */ dontHavePermissions = hasPermissions.every(function (data) { return data === false; });
                    if (!dontHavePermissions) {
                        failedPermission_1 = data;
                    }
                }));
            }), first(function (data) { return data.some(function (data) { return data === true; }); }, false), mergeMap(function (isAllFalse) {
                if (!!failedPermission_1) {
                    _this.handleRedirectOfFailedPermission(permissions, failedPermission_1, route, state);
                    return of(false);
                }
                if (!isAllFalse && permissions.only) {
                    return _this.onlyRedirectCheck(permissions, route, state);
                }
                return of(!isAllFalse);
            })).toPromise();
        }
        return Promise.all([this.permissionsService.hasPermission(/** @type {?} */ (permissions.except)), this.rolesService.hasOnlyRoles(/** @type {?} */ (permissions.except))])
            .then(function (_a) {
            var hasPermission = _a[0], hasRoles = _a[1];
            if (hasPermission || hasRoles) {
                if (permissions.redirectTo) {
                    _this.redirectToAnotherRoute(permissions.redirectTo, route, state);
                }
                return false;
            }
            if (permissions.only) {
                return _this.checkOnlyPermissions(permissions, route, state);
            }
            return true;
        });
    };
    /**
     * @param {?} redirectTo
     * @param {?} route
     * @param {?=} state
     * @param {?=} failedPermissionName
     * @return {?}
     */
    NgxPermissionsGuard.prototype.redirectToAnotherRoute = /**
     * @param {?} redirectTo
     * @param {?} route
     * @param {?=} state
     * @param {?=} failedPermissionName
     * @return {?}
     */
    function (redirectTo, route, state, failedPermissionName) {
        if (isFunction(redirectTo)) {
            redirectTo = (/** @type {?} */ (redirectTo))(failedPermissionName, route, state);
        }
        if (this.isRedirectionWithParameters(redirectTo)) {
            if (this.hasNavigationExtrasAsFunction(redirectTo)) {
                (/** @type {?} */ (redirectTo)).navigationExtras = (/** @type {?} */ ((/** @type {?} */ (redirectTo)).navigationExtras))(route, state);
            }
            if (this.hasNavigationCommandsAsFunction(redirectTo)) {
                (/** @type {?} */ (redirectTo)).navigationCommands = (/** @type {?} */ ((/** @type {?} */ (redirectTo)).navigationCommands))(route, state);
            }
            this.router.navigate((/** @type {?} */ ((/** @type {?} */ (redirectTo)).navigationCommands)), (/** @type {?} */ ((/** @type {?} */ (redirectTo)).navigationExtras)));
            return;
        }
        if (Array.isArray(redirectTo)) {
            this.router.navigate(redirectTo);
        }
        else {
            this.router.navigate([redirectTo]);
        }
    };
    /**
     * @param {?} object
     * @return {?}
     */
    NgxPermissionsGuard.prototype.isRedirectionWithParameters = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);
    };
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    NgxPermissionsGuard.prototype.hasNavigationExtrasAsFunction = /**
     * @param {?} redirectTo
     * @return {?}
     */
    function (redirectTo) {
        return !!(/** @type {?} */ (redirectTo)).navigationExtras &&
            isFunction((/** @type {?} */ (redirectTo)).navigationExtras);
    };
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    NgxPermissionsGuard.prototype.hasNavigationCommandsAsFunction = /**
     * @param {?} redirectTo
     * @return {?}
     */
    function (redirectTo) {
        return !!(/** @type {?} */ (redirectTo)).navigationCommands &&
            isFunction((/** @type {?} */ (redirectTo)).navigationCommands);
    };
    /**
     * @param {?} permissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.onlyRedirectCheck = /**
     * @param {?} permissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    function (permissions, route, state) {
        var _this = this;
        var /** @type {?} */ failedPermission = '';
        return from(permissions.only).pipe(mergeMap(function (data) {
            return forkJoin([
                _this.permissionsService.hasPermission(/** @type {?} */ (data)),
                _this.rolesService.hasOnlyRoles(/** @type {?} */ (data))
            ]).pipe(tap(function (hasPermission) {
                var /** @type {?} */ failed = hasPermission.every(function (data) { return data === false; });
                if (failed) {
                    failedPermission = data;
                }
            }));
        }), first(function (data) {
            if (isFunction(permissions.redirectTo)) {
                return data.some(function (data) { return data === true; });
            }
            return data.every(function (data) { return data === false; });
        }, false), mergeMap(function (pass) {
            if (isFunction(permissions.redirectTo)) {
                if (pass) {
                    return of(true);
                }
                else {
                    _this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                    return of(false);
                }
            }
            else {
                if (!!failedPermission) {
                    _this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                }
                return of(!pass);
            }
        })).toPromise();
    };
    /**
     * @param {?} permissions
     * @param {?} failedPermission
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.handleRedirectOfFailedPermission = /**
     * @param {?} permissions
     * @param {?} failedPermission
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    function (permissions, failedPermission, route, state) {
        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {
            this.redirectToAnotherRoute((/** @type {?} */ (permissions.redirectTo))[failedPermission], route, state, failedPermission);
        }
        else {
            if (isFunction(permissions.redirectTo)) {
                this.redirectToAnotherRoute((/** @type {?} */ (permissions.redirectTo)), route, state, failedPermission);
            }
            else {
                this.redirectToAnotherRoute((/** @type {?} */ (permissions.redirectTo))['default'], route, state, failedPermission);
            }
        }
    };
    /**
     * @param {?} permissions
     * @param {?} failedPermission
     * @return {?}
     */
    NgxPermissionsGuard.prototype.isFailedPermissionPropertyOfRedirectTo = /**
     * @param {?} permissions
     * @param {?} failedPermission
     * @return {?}
     */
    function (permissions, failedPermission) {
        return !!permissions.redirectTo && permissions.redirectTo[/** @type {?} */ (failedPermission)];
    };
    /**
     * @param {?} purePermissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.checkOnlyPermissions = /**
     * @param {?} purePermissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    function (purePermissions, route, state) {
        var _this = this;
        var /** @type {?} */ permissions = __assign$2({}, purePermissions);
        return Promise.all([this.permissionsService.hasPermission(/** @type {?} */ (permissions.only)), this.rolesService.hasOnlyRoles(/** @type {?} */ (permissions.only))])
            .then(function (_a) {
            var hasPermission = _a[0], hasRole = _a[1];
            if (hasPermission || hasRole)
                return true;
            if (permissions.redirectTo) {
                _this.redirectToAnotherRoute(permissions.redirectTo, route, state);
            }
            return false;
        });
    };
    /**
     * @param {?} permissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.passingOnlyPermissionsValidation = /**
     * @param {?} permissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    function (permissions, route, state) {
        if ((isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {
            return this.onlyRedirectCheck(permissions, route, state);
        }
        return this.checkOnlyPermissions(permissions, route, state);
    };
    NgxPermissionsGuard.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxPermissionsGuard.ctorParameters = function () { return [
        { type: NgxPermissionsService, },
        { type: NgxRolesService, },
        { type: Router, },
    ]; };
    return NgxPermissionsGuard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsAllowStubDirective = /** @class */ (function () {
    function NgxPermissionsAllowStubDirective(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.permissionsAuthorized = new EventEmitter();
        this.permissionsUnauthorized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgxPermissionsAllowStubDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.viewContainer.clear();
        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());
        this.permissionsUnauthorized.emit();
    };
    /**
     * @return {?}
     */
    NgxPermissionsAllowStubDirective.prototype.getAuthorizedTemplate = /**
     * @return {?}
     */
    function () {
        return this.ngxPermissionsOnlyThen ||
            this.ngxPermissionsExceptThen ||
            this.ngxPermissionsThen ||
            this.templateRef;
    };
    NgxPermissionsAllowStubDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] },
    ];
    /** @nocollapse */
    NgxPermissionsAllowStubDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
    ]; };
    NgxPermissionsAllowStubDirective.propDecorators = {
        "ngxPermissionsOnly": [{ type: Input },],
        "ngxPermissionsOnlyThen": [{ type: Input },],
        "ngxPermissionsOnlyElse": [{ type: Input },],
        "ngxPermissionsExcept": [{ type: Input },],
        "ngxPermissionsExceptElse": [{ type: Input },],
        "ngxPermissionsExceptThen": [{ type: Input },],
        "ngxPermissionsThen": [{ type: Input },],
        "ngxPermissionsElse": [{ type: Input },],
        "ngxPermissionsOnlyAuthorisedStrategy": [{ type: Input },],
        "ngxPermissionsOnlyUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsExceptUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsExceptAuthorisedStrategy": [{ type: Input },],
        "ngxPermissionsUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsAuthorisedStrategy": [{ type: Input },],
        "permissionsAuthorized": [{ type: Output },],
        "permissionsUnauthorized": [{ type: Output },],
    };
    return NgxPermissionsAllowStubDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxPermissionsRestrictStubDirective = /** @class */ (function () {
    function NgxPermissionsRestrictStubDirective(viewContainer) {
        this.viewContainer = viewContainer;
        this.permissionsAuthorized = new EventEmitter();
        this.permissionsUnauthorized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgxPermissionsRestrictStubDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.viewContainer.clear();
        if (this.getUnAuthorizedTemplate()) {
            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());
        }
        this.permissionsUnauthorized.emit();
    };
    /**
     * @return {?}
     */
    NgxPermissionsRestrictStubDirective.prototype.getUnAuthorizedTemplate = /**
     * @return {?}
     */
    function () {
        return this.ngxPermissionsOnlyElse ||
            this.ngxPermissionsExceptElse ||
            this.ngxPermissionsElse;
    };
    NgxPermissionsRestrictStubDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] },
    ];
    /** @nocollapse */
    NgxPermissionsRestrictStubDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    NgxPermissionsRestrictStubDirective.propDecorators = {
        "ngxPermissionsOnly": [{ type: Input },],
        "ngxPermissionsOnlyThen": [{ type: Input },],
        "ngxPermissionsOnlyElse": [{ type: Input },],
        "ngxPermissionsExcept": [{ type: Input },],
        "ngxPermissionsExceptElse": [{ type: Input },],
        "ngxPermissionsExceptThen": [{ type: Input },],
        "ngxPermissionsThen": [{ type: Input },],
        "ngxPermissionsElse": [{ type: Input },],
        "ngxPermissionsOnlyAuthorisedStrategy": [{ type: Input },],
        "ngxPermissionsOnlyUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsExceptUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsExceptAuthorisedStrategy": [{ type: Input },],
        "ngxPermissionsUnauthorisedStrategy": [{ type: Input },],
        "ngxPermissionsAuthorisedStrategy": [{ type: Input },],
        "permissionsAuthorized": [{ type: Output },],
        "permissionsUnauthorized": [{ type: Output },],
    };
    return NgxPermissionsRestrictStubDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxRole = /** @class */ (function () {
    function NgxRole(name, validationFunction) {
        this.name = name;
        this.validationFunction = validationFunction;
    }
    return NgxRole;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
function NgxPermissionsModuleConfig() { }
var NgxPermissionsModule = /** @class */ (function () {
    function NgxPermissionsModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxPermissionsModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: NgxPermissionsModule,
            providers: [
                NgxPermissionsStore,
                NgxRolesStore,
                NgxPermissionsConfigurationStore,
                NgxPermissionsService,
                NgxPermissionsGuard,
                NgxRolesService,
                NgxPermissionsConfigurationService,
                { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },
                { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },
                { provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate },
            ]
        };
    };
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxPermissionsModule.forChild = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: NgxPermissionsModule,
            providers: [
                { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },
                { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },
                { provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate },
                NgxPermissionsConfigurationService,
                NgxPermissionsService,
                NgxRolesService,
                NgxPermissionsGuard
            ]
        };
    };
    NgxPermissionsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsDirective
                    ],
                    exports: [
                        NgxPermissionsDirective
                    ]
                },] },
    ];
    return NgxPermissionsModule;
}());
var NgxPermissionsAllowStubModule = /** @class */ (function () {
    function NgxPermissionsAllowStubModule() {
    }
    NgxPermissionsAllowStubModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsAllowStubDirective
                    ],
                    exports: [
                        NgxPermissionsAllowStubDirective
                    ]
                },] },
    ];
    return NgxPermissionsAllowStubModule;
}());
var NgxPermissionsRestrictStubModule = /** @class */ (function () {
    function NgxPermissionsRestrictStubModule() {
    }
    NgxPermissionsRestrictStubModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsRestrictStubDirective
                    ],
                    exports: [
                        NgxPermissionsRestrictStubDirective
                    ]
                },] },
    ];
    return NgxPermissionsRestrictStubModule;
}());

export { NgxPermissionsModuleConfig, NgxPermissionsModule, NgxPermissionsAllowStubModule, NgxPermissionsRestrictStubModule, NgxRolesStore, NgxPermissionsStore, NgxPermissionsConfigurationStore, NgxPermissionsDirective, USE_PERMISSIONS_STORE, NgxPermissionsService, USE_ROLES_STORE, NgxRolesService, USE_CONFIGURATION_STORE, NgxPermissionsConfigurationService, NgxPermissionsGuard, NgxRole, NgxPermissionsAllowStubDirective, NgxPermissionsRestrictStubDirective, NgxPermissionsPredefinedStrategies };
